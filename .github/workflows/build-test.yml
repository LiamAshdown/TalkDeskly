name: Build and Test

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file for testing
        run: |
          cat > .env << EOF
          DATABASE_URL=postgres://postgres:postgres@postgres:5432/talkdeskly
          JWT_SECRET=test-secret-key
          BASE_URL=http://localhost:8080
          REDIS_URL=redis:6379
          EMAIL_HOST=mailhog
          EMAIL_PORT=1025
          EMAIL_FROM=noreply@talkdeskly.com
          VITE_API_URL=http://localhost:8080/api
          VITE_WS_URL=ws://localhost:8080/ws
          EOF

      - name: Build all services
        run: |
          docker compose -f docker-compose.dev.yml build --parallel

      - name: Start services
        run: |
          docker compose -f docker-compose.dev.yml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for database to be ready..."
          timeout 120 bash -c 'until docker compose -f docker-compose.dev.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'

          echo "Waiting for mailhog to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:8025 2>/dev/null; do sleep 2; done'

          echo "Waiting for backend to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:8080/health 2>/dev/null; do sleep 3; done'

          echo "Waiting for frontend to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3001 2>/dev/null; do sleep 3; done'

          echo "Waiting for chat-bubble to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do sleep 3; done'

      - name: Verify service status
        run: |
          echo "=== Service Status ==="
          docker compose -f docker-compose.dev.yml ps
          echo ""
          echo "=== Service Health Checks ==="

          # Check if services are responding
          echo "Testing backend..."
          curl -f http://localhost:8080/health -w "Backend: %{http_code}\n" -o /dev/null -s || echo "Backend: Not responding"

          echo "Testing frontend..."
          curl -f http://localhost:3001 -w "Frontend: %{http_code}\n" -o /dev/null -s || echo "Frontend: Not responding"

          echo "Testing chat-bubble..."
          curl -f http://localhost:3000 -w "Chat-bubble: %{http_code}\n" -o /dev/null -s || echo "Chat-bubble: Not responding"

          echo "Testing database connection..."
          docker compose -f docker-compose.dev.yml exec -T postgres pg_isready -U postgres || echo "Database: Not ready"

          echo "Testing Redis..."
          docker compose -f docker-compose.dev.yml exec -T redis redis-cli ping || echo "Redis: Not responding"

          echo "Testing mailhog..."
          curl -f http://localhost:8025 -w "Mailhog: %{http_code}\n" -o /dev/null -s || echo "Mailhog: Not responding"

      - name: Show service logs for verification
        run: |
          echo "=== Recent Backend Logs ==="
          docker compose -f docker-compose.dev.yml logs --tail=20 backend
          echo ""
          echo "=== Recent Frontend Logs ==="
          docker compose -f docker-compose.dev.yml logs --tail=20 frontend
          echo ""
          echo "=== Recent Chat-bubble Logs ==="
          docker compose -f docker-compose.dev.yml logs --tail=20 chat-bubble
          echo ""
          echo "=== Recent Mailhog Logs ==="
          docker compose -f docker-compose.dev.yml logs --tail=20 mailhog

      - name: Check logs on failure
        if: failure()
        run: |
          echo "=== Full Backend logs ==="
          docker compose -f docker-compose.dev.yml logs backend
          echo "=== Full Frontend logs ==="
          docker compose -f docker-compose.dev.yml logs frontend
          echo "=== Full Chat-bubble logs ==="
          docker compose -f docker-compose.dev.yml logs chat-bubble
          echo "=== Postgres logs ==="
          docker compose -f docker-compose.dev.yml logs postgres
          echo "=== Redis logs ==="
          docker compose -f docker-compose.dev.yml logs redis
          echo "=== Mailhog logs ==="
          docker compose -f docker-compose.dev.yml logs mailhog

      - name: Clean up
        if: always()
        run: |
          docker compose -f docker-compose.dev.yml down -v
          docker system prune -f
